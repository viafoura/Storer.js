{"name":"Storer.js","body":"# Storer.js - HTML5 Web Storage for Any Browser\r\nOriginally written for [Viafoura](http://viafoura.com/ \"Viafoura is an audience engagement platform for publishers\") by Shahyar G, released for public consumption by Viafoura, Inc.\r\n\r\n## Introduction\r\nStorer.js is a fallback-reliant, HTML5 Storage-based storage system. It implements a completely cross-browser-compatible system with implementations of `localStorage`, `sessionStorage`, `cookieStorage`, and `memoryStorage`.\r\n\r\nAll of its storage subsystems implement `getItem`, `setItem`, `removeItem`, `clear`, `key`, and `length`, as the HTML5 Web Storage specification is written. However, there are some enhancements on these methods, and slight deviations from it with `memoryStorage` and `cookieStorage`.\r\n\r\n## How it works\r\nIt piggybacks on the real HTML5 storage when available, and creates the additional functionality of being able to prepend a 'prefix' to all key names automatically (see initStorer params). This is useful for projects where you would like to use Storage without worrying about name collisions.\r\n\r\nIt _always_ returns every type of storage, and falls back to others, as listed below. In the worst-case scenario, all the storage subsystems are instances of memoryStorage, which means no persistance is available, but that no code will break while performing actions on the current page.\r\n\r\nThe fallbacks are as follows:\r\n\r\n    localStorage   = localStorage   || userData    || cookieStorage || memoryStorage;\r\n    sessionStorage = sessionStorage || window.name || memoryStorage;\r\n    cookieStorage  = cookieStorage  || memoryStorage;\r\n    memoryStorage  = memoryStorage\r\n\r\ncookieStorage also supports an additional 'global' Boolean argument on all of its methods, allowing you to escape out of the 'prefix' defined, so that you may use it to fetch general cookies as well.\r\n\r\n## Usage\r\n`initStorer` is called, takes a callback function, which will return the storage subsystems. Why? This is necessary because the Internet Explorer 7- fallback for `localStorage` is `userData`, which needs to be able to insert an element into the document before proceeding. On any modern (or non-IE7) browser, the callback function is triggered synchronously and immediately. There is no delay at all in this scenario. **domReady or jQuery is required for userData functionality in IE7 or lower.**\r\n\r\nIn a worst-case scenario, all of the storages are `memoryStorage`, which means the data will not persist across pages. In a best-case scenario, each of the storage types are implemented using native `sessionStorage` and `localStorage` with cookie support as well with `cookieStorage`.\r\n\r\n### Examples\r\nUsing callback and a custom prefix (callback supports IE7 and lower):\r\n\r\n    initStorer(function (Storer) {\r\n        cookieStorage  = Storer.cookieStorage;\r\n        memoryStorage  = Storer.memoryStorage;\r\n        sessionStorage = Storer.sessionStorage;\r\n        localStorage   = Storer.localStorage;\r\n    }, { 'prefix': '_MyStorage_' });\r\n\r\nUsing return (return does not support localStorage in IE7):\r\n\r\n    var Storer = initStorer();\r\n\r\n### Arguments for `initStorer`\r\n    initStorer([Function callback[, Object params]]);\r\n\r\n#### Function `callback(Object Storer)`\r\nThe callback function to call once the storage has been initialized. In most modern browsers, it is called synchronously. In older versions of IE that require the use of userData for localStorage, it is triggered asynchronously once the page has loaded.\r\n\r\nIt returns an Object called Storer, which contains cookieStorage, localStorage, memoryStorage, and sessionStorage.\r\n\r\n#### Object `params`\r\n    {String} [prefix='']         automatic key prefix for sessionStorage and localStorage\r\n    {String} [default_domain=''] default domain for cookies\r\n    {String} [default_path='']   default path for cookies\r\n\r\n### Important notice regarding dependencies\r\nFor Internet Explorer 7 and lower, initStorer requires a function called domReady, or uses jQuery(document).ready if available. If no function is found, localStorage will silently fail and is not usable in old IE browsers. `domReady` is included in the dependencies subdirectory of this repository. _(In a future revision, this functionality may fall back to cookieStorage when no such function is present.)_\r\n\r\n## License\r\nCreative Commons Attribution 3.0 Unported (CC BY 3.0). http://creativecommons.org/licenses/by/3.0/\r\nIt's free. All we ask is that you maintain the @copyright and @author comments in the code. Nothing else is necessary.\r\n\r\n## Addendum\r\nHere is a cat. =^.^= His name is Frisbee.\r\n\r\n-- Copyright (c) 2011 Viafoura, Inc.\r\n","tagline":"Storer.js - HTML5 Web Storage for Any Browser","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}